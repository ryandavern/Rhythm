package com.beatplaylist.gui.module.page.login;

import com.beatplaylist.enums.FontType;
import com.beatplaylist.gui.CenterBox;
import com.beatplaylist.gui.GUIManager;
import com.beatplaylist.settings.Settings;
import com.beatplaylist.utilities.CustomColor;
import com.beatplaylist.utilities.control.TextField;
import com.beatplaylist.utilities.events.CompleteEvent;
import com.beatplaylist.utilities.network.login.GetAccessKeyFromCode;
import com.beatplaylist.utilities.notification.AlertType;
import com.beatplaylist.utilities.notification.Notification;
import com.beatplaylist.utilities.validation.ValidateManager;

import javafx.animation.FadeTransition;
import javafx.application.Platform;
import javafx.scene.Cursor;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.scene.text.TextAlignment;
import javafx.util.Duration;

public class confirm_login_page {

	private TextField codeTextField;
	private Button confirmCodeButton, backToLoginButton;
	private Text loginHeaderText, loginSubHeaderText;
	private boolean isTOTP = false;
	private int codeLength = 4;

	private CenterBox centerBox;

	public confirm_login_page(String type) {
		this.centerBox = new CenterBox();
		this.codeTextField = new TextField();
		this.loginHeaderText = new Text("2-step Verification");
		this.loginSubHeaderText = new Text("A four digit confirmation code has been sent to your email");

		this.confirmCodeButton = new Button("Confirm Code") {
			public void requestFocus() {

			}
		};
		this.backToLoginButton = new Button("Back to Login") {
			public void requestFocus() {

			}
		};
		// totp | email
		if (type.equals("totp")) {
			this.codeLength = 6;
			this.isTOTP = true;
			this.loginSubHeaderText = new Text("Enter the code generated by your authentication app.");
		} else
			this.loginSubHeaderText = new Text("A four digit confirmation code has been sent to your email");
	}

	public void run() {
		GUIManager.getInstance().getPane().getChildren().clear();
		configure();
		listen();
	}

	public void configure() {
		this.loginHeaderText.setFont(Font.font(FontType.DEFAULT.getName(), FontWeight.BOLD, 15));
		this.loginHeaderText.setFill(Color.web(CustomColor.WHITE.getColorHex()));
		this.loginHeaderText.setTextAlignment(TextAlignment.CENTER);

		this.loginSubHeaderText.setFont(Font.font(FontType.DEFAULT.getName(), 15));
		this.loginSubHeaderText.setFill(Color.web(CustomColor.GRAY.getColorHex()));
		this.loginSubHeaderText.setTextAlignment(TextAlignment.CENTER);
		this.loginSubHeaderText.setWrappingWidth(300);

		if (this.isTOTP)
			this.codeTextField.setPromptText("Enter second factor code");
		else
			this.codeTextField.setPromptText("Enter 4 digit code sent to the email address entered");

		this.codeTextField.setMinSize(300, 35);
		this.codeTextField.setStyle("-fx-background-color: " + CustomColor.DARK_BACKGROUND.getColorHex() + "; -fx-text-fill: white; -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);");
		this.codeTextField.setFont(Font.font(FontType.VERDANA.getName(), 12));
		
		// Style confirm code and back to login button
		styleButton(this.confirmCodeButton);
		this.confirmCodeButton.setDisable(true);
		
		styleButton(this.backToLoginButton);

		this.centerBox.getContentVBox().getChildren().addAll(this.loginHeaderText, this.loginSubHeaderText, this.codeTextField, this.confirmCodeButton, this.backToLoginButton);
		GUIManager.getInstance().getPane().getChildren().add(this.centerBox.getWrapperHBox());

		FadeTransition fadeTransition = new FadeTransition(Duration.millis(250), this.centerBox.getContentVBox());
		fadeTransition.setFromValue(0.0);
		fadeTransition.setToValue(1.0);
		fadeTransition.play();
	}

	public void listen() {
		this.codeTextField.setOnKeyPressed(event -> {
			if (event.getCode() == KeyCode.ENTER) {
				login();
			}
		});
		this.codeTextField.textProperty().addListener((observable, oldValue, newValue) -> {
			if (ValidateManager.isValidCode(newValue)) {
				if (newValue.equals("_")) {
					this.codeTextField.setText(oldValue);
					return;
				}
				if (this.codeTextField.getText().length() > this.codeLength)
					this.codeTextField.setText(oldValue.toUpperCase());
				else
					this.codeTextField.setText(newValue.toUpperCase());

				if (this.codeTextField.getText().length() >= this.codeLength)
					this.confirmCodeButton.setDisable(false);
				else
					this.confirmCodeButton.setDisable(true);
			} else
				this.codeTextField.setText(oldValue.toUpperCase());
		});
		this.confirmCodeButton.setOnMouseClicked(event -> {
			login();
		});
		this.backToLoginButton.setOnMouseClicked(event -> {
			Settings.getInstance().setAutoLogin(false, true);
			new login_page().run();
		});
	}

	private void login() {
		if (this.codeTextField.getText().isEmpty() || this.codeTextField.getText().length() < this.codeLength) {
			if (this.isTOTP) {
				Notification.getInstance().createNotification("Code Error", "Please enter the " + this.codeLength + " digit code generated by your authentication app", AlertType.ERROR);
			} else {
				Notification.getInstance().createNotification("Code Error", "Please enter the " + this.codeLength + " digit code that was sent to your email", AlertType.ERROR);
			}
			return;
		}
		String code = this.codeTextField.getText().trim().replaceAll("\\s", "");

		this.codeTextField.setText("");
		this.confirmCodeButton.setDisable(true);
		this.codeTextField.setDisable(true);

		GetAccessKeyFromCode.send(code, this.isTOTP, new CompleteEvent() {
			public void onSuccess() {
				Platform.runLater(() -> {
					confirmCodeButton.setDisable(false);
					codeTextField.setDisable(false);
				});
			}

			@Override
			public void onFail(String error) {
				Platform.runLater(() -> {
					confirmCodeButton.setDisable(false);
					codeTextField.setDisable(false);
				});
			}
		});
	}

	private void styleButton(Button button) {
		button.setMinSize(300, 35);
		button.setFont(Font.font(FontType.DEFAULT.getName(), FontWeight.BOLD, 14));
		button.setStyle("-fx-background-color: " + CustomColor.DARK_BACKGROUND.getColorHex() + "; -fx-background-radius: 10px; -fx-border-radius: 10px;");
		button.setCursor(Cursor.HAND);
		button.setTextFill(Color.web(CustomColor.WHITE.getColorHex()));
		button.setOnMouseEntered(event -> {
			button.setTextFill(Color.web(CustomColor.RHYTHM.getColorHex()));
		});
		button.setOnMouseExited(event -> {
			button.setTextFill(Color.web(CustomColor.WHITE.getColorHex()));
		});
	}
}